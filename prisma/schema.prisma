// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Product {
  id            String   @id @default(cuid())
  name          String
  description   String
  mainImgUrl    String   @default("https://res.cloudinary.com/dcfrlqakq/image/upload/v1753473129/image_1_lapjpe.png")
  price         Decimal
  stockQty      Int
  discount      Decimal?
  categoryId    String
  brand         String
  material      String
  originCountry String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  category      Category         @relation(fields: [categoryId], references: [id])
  sizes         ProductSize[]
  colors        ProductColor[]
  features      ProductFeature[]
  reviews       Review[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  images        ProductImage[]
  orderItems    OrderItem[]
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  url       String // e.g., Cloudinary or Supabase storage URL
  alt       String? // optional image description
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model ProductSize {
  id String @id @default(cuid())

  productId String
  size      String
  stockQty  Int
  product   Product @relation(fields: [productId], references: [id])
}

model ProductColor {
  id String @id @default(cuid())

  productId String
  color     String
  hexCode   String?
  product   Product @relation(fields: [productId], references: [id])
}

model ProductFeature {
  id String @id @default(cuid())

  productId String
  key       String
  value     String

  product Product @relation(fields: [productId], references: [id])
}

model Review {
  id String @id @default(cuid())

  productId  String
  customerId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [id])
  customer Customer @relation(fields: [customerId], references: [id])
}

//CATEGORY SECTION

enum GenderCategory {
  male
  female
}

model Category {
  id String @id @default(cuid())

  name        GenderCategory
  description String

  products Product[]
}

// CUSTOMER SECTION
model Customer {
  id            String   @id
  name          String?
  email         String?  @unique
  userAvatarUrl String?
  provider      String?
  providerId    String?
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  reviews       Review[]
  carts         Cart[]
  wishlistItems WishlistItem[]
  orders        Order[]
}

// CART SECTION
model Cart {
  id String @id @default(cuid())

  customerId String
  name       String

  customer Customer   @relation(fields: [customerId], references: [id])
  items    CartItem[]
}

model CartItem {
  cartId    String
  productId String
  itemQty   Int
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
}

// WISHLIST SECTION
model WishlistItem {
  id String @id @default(cuid())

  customerId String
  productId  String
  createdAt  DateTime @default(now())

  customer Customer @relation(fields: [customerId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

// ADMIN SECTION
model Admin {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  createdAt     DateTime @default(now())
  userAvatarUrl String?
}

model Order {
  id          String      @id @default(cuid())
  customerId  String
  totalAmount Decimal
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())

  customer Customer    @relation(fields: [customerId], references: [id])
  items    OrderItem[]
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
